/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/Application.java to edit this template
 */
package iu;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import negocio.Sistema;

/**
 *
 * @author leonel
 */
public class JF_ppal extends javax.swing.JFrame
{

    JF_Alumnos jF_Alumnos;
    JF_Recomendaciones jF_Recomendaciones;
    JF_Escenarios jF_Escenarios;
    Sistema sistema;
   
    
    public JF_ppal()
    {
        initComponents();
        sistema = Sistema.getInstance();
        
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        menuBar = new javax.swing.JMenuBar();
        AlumnosMenu = new javax.swing.JMenu();
        altaAlumno = new javax.swing.JMenuItem();
        escenariosMenu = new javax.swing.JMenu();
        modificacionEscenario = new javax.swing.JMenuItem();
        recomendacionesMenu = new javax.swing.JMenu();
        recomendarMenuItem = new javax.swing.JMenuItem();

        FormListener formListener = new FormListener();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        AlumnosMenu.setMnemonic('e');
        AlumnosMenu.setText("Alumnos");

        altaAlumno.setMnemonic('t');
        altaAlumno.setText("Alta");
        altaAlumno.addMouseListener(formListener);
        AlumnosMenu.add(altaAlumno);

        menuBar.add(AlumnosMenu);

        escenariosMenu.setMnemonic('f');
        escenariosMenu.setText("Escenarios");

        modificacionEscenario.setMnemonic('o');
        modificacionEscenario.setText("Modificacion");
        modificacionEscenario.addMouseListener(formListener);
        escenariosMenu.add(modificacionEscenario);

        menuBar.add(escenariosMenu);

        recomendacionesMenu.setMnemonic('h');
        recomendacionesMenu.setText("Recomendaciones");

        recomendarMenuItem.setMnemonic('c');
        recomendarMenuItem.setText("Recomendar");
        recomendarMenuItem.addMouseListener(formListener);
        recomendacionesMenu.add(recomendarMenuItem);

        menuBar.add(recomendacionesMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 838, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 476, Short.MAX_VALUE)
        );

        pack();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.MouseListener
    {
        FormListener() {}
        public void mouseClicked(java.awt.event.MouseEvent evt)
        {
            if (evt.getSource() == altaAlumno)
            {
                JF_ppal.this.altaAlumnoMouseClicked(evt);
            }
        }

        public void mouseEntered(java.awt.event.MouseEvent evt)
        {
        }

        public void mouseExited(java.awt.event.MouseEvent evt)
        {
        }

        public void mousePressed(java.awt.event.MouseEvent evt)
        {
            if (evt.getSource() == altaAlumno)
            {
                JF_ppal.this.altaAlumnoMousePressed(evt);
            }
            else if (evt.getSource() == modificacionEscenario)
            {
                JF_ppal.this.modificacionEscenarioMousePressed(evt);
            }
            else if (evt.getSource() == recomendarMenuItem)
            {
                JF_ppal.this.recomendarMenuItemMousePressed(evt);
            }
        }

        public void mouseReleased(java.awt.event.MouseEvent evt)
        {
        }
    }// </editor-fold>//GEN-END:initComponents

    private void altaAlumnoMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_altaAlumnoMouseClicked
    {//GEN-HEADEREND:event_altaAlumnoMouseClicked
       
    }//GEN-LAST:event_altaAlumnoMouseClicked

    private void altaAlumnoMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_altaAlumnoMousePressed
    {//GEN-HEADEREND:event_altaAlumnoMousePressed
        System.out.println("alta de alumno mouse pressed");
        jF_Alumnos = new JF_Alumnos();
        add(jF_Alumnos);
        jF_Alumnos.setVisible(true);
        jF_Alumnos.setSize(this.getSize());
    }//GEN-LAST:event_altaAlumnoMousePressed

    private void recomendarMenuItemMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_recomendarMenuItemMousePressed
    {//GEN-HEADEREND:event_recomendarMenuItemMousePressed
        jF_Recomendaciones = new JF_Recomendaciones();
        add(jF_Recomendaciones);
        jF_Recomendaciones.setVisible(true);
        jF_Recomendaciones.setSize(this.getSize());
    }//GEN-LAST:event_recomendarMenuItemMousePressed

    private void modificacionEscenarioMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_modificacionEscenarioMousePressed
    {//GEN-HEADEREND:event_modificacionEscenarioMousePressed
        jF_Escenarios = new JF_Escenarios();
        add(jF_Escenarios);
        jF_Escenarios.setVisible(true);
        jF_Escenarios.setSize(this.getSize());
    }//GEN-LAST:event_modificacionEscenarioMousePressed

    /**
     * @param args the command line arguments
     */

    
    public static void main(String args[])
    {
        System.out.println("jF_ppal");
        // Obtener el logger para el paquete java.awt
        Logger awtLogger = Logger.getLogger("java.awt");
        // Obtener el logger para el paquete sun.awt
        Logger sunAwtLogger = Logger.getLogger("sun.awt");
        // Obtener el logger para el paquete javax.swing
        Logger swingLogger = Logger.getLogger("javax.swing");
        // Obtener el logger para el paquete jdk.internal
        Logger internalLogger = Logger.getLogger("jdk.internal");
        // Obtener el logger para el paquete jdk.internal.event.EventHelper
        //Logger eventHelperLogger = Logger.getLogger("jdk.internal.event.EventHelper");
        
       // Logger eventHelperLoggerCertificate = Logger.getLogger("jdk.internal.event.EventHelper logX509CertificateEvent");
        

        // Establecer el nivel de registro a WARNING o SEVERE para ambos paquetes
        awtLogger.setLevel(Level.WARNING); // o Level.SEVERE
        sunAwtLogger.setLevel(Level.WARNING); // o Level.SEVERE
        swingLogger.setLevel(Level.WARNING); // o Level.SEVERE
        internalLogger.setLevel(Level.WARNING); // o Level.SEVERE
       // eventHelperLogger.setLevel(Level.OFF); // o Level.SEVERE
        
     //   eventHelperLoggerCertificate.setLevel(Level.WARNING);

        // Desactivar el manejo de registros para la consola (si se desea)
        awtLogger.setUseParentHandlers(false);
        sunAwtLogger.setUseParentHandlers(false);
        swingLogger.setUseParentHandlers(false);
        internalLogger.setUseParentHandlers(false);
       // eventHelperLogger.setUseParentHandlers(false);
        
       // eventHelperLoggerCertificate.setUseParentHandlers(false);
        
        

        // Ejemplo de cómo registrar específicamente el método logX509CertificateEvent
        /*
        if (eventHelperLogger.isLoggable(Level.WARNING)) {
            eventHelperLogger.log(Level.WARNING, "Se ha invocado el método logX509CertificateEvent");
        }
        * */
        
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try
        {
            // Set cross-platform Java L&F (also called "Metal")
            UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
        }
        catch (UnsupportedLookAndFeelException e)
        {
            // handle exception
            System.out.println("UnsupportedLookAndFeelException e");
        }
        catch (ClassNotFoundException e)
        {
            // handle exception
            System.out.println("ClassNotFoundException e");
        }
        catch (InstantiationException e)
        {
            System.out.println("InstantiationException e e");
        }
        catch (IllegalAccessException e)
        {
            System.out.println("IllegalAccessException e");
        }

        //new SwingApplication(); //Create and show the GUI.
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                JF_ppal jF_ppal = new JF_ppal();
                //JPanel_Recomendaciones jPanel_Recomendaciones = new JPanel_Recomendaciones();

                //Sistema sistema;
                jF_ppal.setVisible(true);
                //sistema = new Sistema();
            }
        });

        ///new JF_ppal().setVisible(true);
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu AlumnosMenu;
    private javax.swing.JMenuItem altaAlumno;
    private javax.swing.JMenu escenariosMenu;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem modificacionEscenario;
    private javax.swing.JMenu recomendacionesMenu;
    private javax.swing.JMenuItem recomendarMenuItem;
    // End of variables declaration//GEN-END:variables

}
